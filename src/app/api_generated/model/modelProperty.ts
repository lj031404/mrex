/**
 * MREX property schema
 * This is the MREX schema for a property
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlavoie@mrex.co
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Address } from './address';
import { Apraisal } from './apraisal';
import { Assessment } from './assessment';
import { Attributes } from './attributes';
import { CommercialSpace } from './commercialSpace';
import { Contact } from './contact';
import { Expenses } from './expenses';
import { ExteriorCoating } from './exteriorCoating';
import { ExternalLink } from './externalLink';
import { FoundationMaterial } from './foundationMaterial';
import { GrossIncome } from './grossIncome';
import { Heating } from './heating';
import { Lease } from './lease';
import { ListingStatuses } from './listingStatuses';
import { ListingType } from './listingType';
import { Maintenance } from './maintenance';
import { Picture } from './picture';
import { PropertyType } from './propertyType';
import { PropertyVideo } from './propertyVideo';
import { ResidentialDistribution } from './residentialDistribution';
import { RoofMaterial } from './roofMaterial';
import { Seller } from './seller';
import { Source } from './source';

/**
 * MREX Property
 */
export interface ModelProperty { 
    /**
     * id of the property
     */
    id?: string;
    /**
     * Original ID of the property, when it originates from a real property. Used for user created properties.
     */
    inheritedFrom?: string;
    image?: string;
    /**
     * version of the document
     */
    revision?: number;
    /**
     * A name given to the property, by the user
     */
    name?: string;
    /**
     * Timestamp at which the property was created
     */
    createdAt?: Date;
    /**
     * Timestamp at which the property was last updated
     */
    updatedAt?: Date;
    /**
     * Official Asking price
     */
    askPrice?: number;
    /**
     * Target price
     */
    targetPrice?: number;
    /**
     * Final price paid
     */
    purchasePrice?: number;
    /**
     * A model (scenario) is binded to a property by its _id. When this field is undefined, then it's a property
     */
    parent?: string;
    /**
     * An array of sources of the raw object (ex. jlr, MLS)
     */
    source?: Array<Source>;
    address?: Address;
    /**
     * Cadastre(s) of the property
     */
    cadastre?: Array<string>;
    /**
     * Number of commercial units
     */
    commercialUnits?: number;
    /**
     * Number of industrial spaces
     */
    industrialUnits?: number;
    /**
     * Number of office spaces
     */
    officeUnits?: number;
    /**
     * Details about commercial spaces
     */
    commercialDistribution?: Array<CommercialSpace>;
    /**
     * Number of residential units (apartments) in the building
     */
    residentialUnits?: number;
    residentialDistribution?: ResidentialDistribution;
    /**
     * Year of the construction
     */
    yearOfConstruction?: number;
    /**
     * Year of the destruction of the building
     */
    yearOfDestruction?: number;
    grossIncome?: GrossIncome;
    expenses?: Expenses;
    /**
     * Area of the lot (in m2)
     */
    lotArea?: number;
    propertyType?: PropertyType;
    /**
     * Area of the lot (in m).
     */
    lotDimension?: string;
    /**
     * Number of parkings
     */
    parkings?: number;
    /**
     * Dimension of the building in square meters (m2)
     */
    buildingArea?: number;
    /**
     * Dimension of the building in meters
     */
    buildingDimension?: string;
    /**
     * Number of floors in the building
     */
    floors?: number;
    /**
     * Total floor area (square meters)
     */
    floorArea?: number;
    /**
     * Type of material for the foundation
     */
    foundation?: Array<FoundationMaterial>;
    /**
     * Type of material for the exterior coating
     */
    coating?: Array<ExteriorCoating>;
    /**
     * A textual description
     */
    description?: string;
    /**
     * Type of material for the roof
     */
    roof?: Array<RoofMaterial>;
    /**
     * Type of heating used and distribution
     */
    heating?: Array<Heating>;
    /**
     * history of taxes assessment for this property. It represent atr a given time, the value of the property used only by the property tax authority of the county or municipality in order to bill the taxes properly.
     */
    assessments?: Array<Assessment>;
    /**
     * history of apraisals for this property. The appraisal reprensent the fair market value of the property given the other transactions for similar properties.
     */
    apraisals?: Array<Apraisal>;
    /**
     * List of sellers
     */
    seller?: Array<Seller>;
    /**
     * List of owners
     */
    owner?: Array<Contact>;
    /**
     * Is a janitor on site?
     */
    hasJanitor?: boolean;
    /**
     * Is there a laundry room in the building
     */
    hasLaundryRoom?: boolean;
    /**
     * Attributes associated to the building
     */
    attributes?: Array<Attributes>;
    /**
     * List of pictures
     */
    pictures?: Array<Picture>;
    /**
     * List of videos
     */
    videos?: Array<PropertyVideo>;
    /**
     * List of external links
     */
    links?: Array<ExternalLink>;
    /**
     * A map URL (ex. Google Map)
     */
    map?: string;
    status?: ListingStatuses;
    /**
     * Maintenance information that helps to give an idea of the past maintenance expenses
     */
    maintenance?: Array<Maintenance>;
    /**
     * Information about leases
     */
    leases?: Array<Lease>;
    /**
     * Version of the algorithm who processed the document
     */
    version?: string;
    /**
     * ListingId
     */
    listingId?: string;
    listingType?: ListingType;
    /**
     * true if the property or listing is a pocket listing
     */
    isPocket?: boolean;
}